# A valid snippet should starts with:
# snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet main "Create main using arguments" b
int main(int ac, const char* av[])
{
	${0:code};
	return 0;
}
endsnippet

snippet mainn "Create simple main without arguments" bA
int main(void)
{
	${0:code};
	return 0;
}
endsnippet

snippet inc "Create system include line" "re.match('^inc$', snip.buffer[snip.line])" bAe
#include <${0:#lib}.h>
endsnippet

snippet Inc "Create custom include line" "re.match('^Inc$', snip.buffer[snip.line])" bAe
#include "${0:#lib}.h"
endsnippet

snippet prag "Create pragma header" "re.match('^prag$', snip.buffer[snip.line])" bAe
#pragma once
endsnippet

snippet cc "Create basic char named c"
char c = 0;
endsnippet

snippet ss "Create basic string named s"
char *s = NULL;
endsnippet

snippet si "Create basic short named i"
short i = 0;
endsnippet

snippet sj "Create basic short named j"
short j = 0;
endsnippet

snippet sy "Create basic short named y"
short y = 0;
endsnippet

snippet ii "Create basic int named i"
int i = 0;
endsnippet

snippet ij "Create basic int named j"
int j = 0;
endsnippet

snippet iy "Create basic int named y"
int y = 0;
endsnippet

snippet li "Create basic long named i"
long i = 0;
endsnippet

snippet lj "Create basic long named j"
long j = 0;
endsnippet

snippet ly "Create basic long named y"
long y = 0;
endsnippet

snippet if "Create if"
if (${1:condition}) {
	${0:code};
}
endsnippet

snippet ifs "Create short if" A
if (${1:condition})
	${0:code};
endsnippet

snippet elifs "Create short else if" A
else if (${1:condition})
	${0:code};
endsnippet

snippet els "Create short else" A
else
	${0:code};
endsnippet

snippet switch "Create switch with default"
switch (${1:variable}) {
	case ${3:case}:
		${0:code};
		break;
	default:
		${2:code};
}
endsnippet

snippet switchs "Create switch without default" A
switch (${1:variable}) {
	case ${2:case}:
		${0:code};
		break;
}
endsnippet

snippet case "Create a switch case" A
case ${1:value}
	${0:code};
	break;
endsnippet

snippet trn "Create ternaire"
${1:condition} ? ${2:yes} : ${3:no}
endsnippet

snippet while "Create while"
while (${1:condition}) {
	${0:code};
}
endsnippet

snippet whiles "Create short while" A
while (${1:condition})
	${0:code};
endsnippet

snippet for "Create for"
for (${1:init}; ${2:condition}; ${3:index}) {
	${0:code};
}
endsnippet

snippet fors "Create short for"
for (${1:init}; ${2:condition}; ${3:index})
	${0:code};
endsnippet

snippet forn "Create navigator for" A
for (${1:int i = 0}; ${2:i < count}; ${3:i++}) {
	${0:code};
}
endsnippet

snippet forsn "Create short navigator for"
for (${1:int i = 0}; ${2:i < count}; ${3:i++})
	${0:code};
endsnippet

snippet ctest "Criterion test template" A
Test(${1:functionName}, ${2:testDescription})
{
	${3:code};

	cr_assert_${4:eq}(${5:expected}, ${6:got});
}
endsnippet

snippet ret "Basic return" A
return $0;
endsnippet

snippet fun "Basic function definition"
${1:void} ${2:function}(void)
{
	${0:code};
}
endsnippet

snippet fun1 "Basic function definition with 1 parameter" A
${1:void} ${2:function}(${3:int} ${4:var})
{
	${0:code};
	return ;
}
endsnippet

snippet fun2 "Basic function definition with 2 parameters" A
${1:void} ${2:function}(${3:int} ${4:var}, ${5:int} ${6:var})
{
	${0:code};
	return ;
}
endsnippet

snippet fun3 "Basic function definition with 3 parameters" A
${1:void} ${2:function}(${3:int} ${4:var}, ${5:int} ${6:var}, ${7:int} ${8:var})
{
	${0:code};
	return ;
}
endsnippet

snippet fun4 "Basic function definition with 4 parameters" A
${1:void} ${2:function}(${3:int} ${4:var}, ${5:int} ${6:var}, ${7:int} ${8:var}, ${9:int} ${10:var})
{
	${0:code};
	return ;
}
endsnippet

snippet guard "Header guard" A
#ifndef ${0:GUARD}_H
	#define $0_H

#endif
endsnippet

snippet dfun "Basic function prototype"
/*
** ${2:Brief}
**
** ${4:No return value}
*/
${3:void} ${1:function}(void);
endsnippet

snippet dfun1 "Basic function prototype with 1 parameter" A
/*
** ${2:Brief}
**
** ${4:No return value}
**
** $6 -> ${7:description}
*/
${3:void} ${1:function}(${5:int} ${6:var});
endsnippet

snippet dfun2 "Basic function prototype with 2 parameters" A
/*
** ${2:Brief}
**
** ${4:No return value}
**
** $6 -> ${7:description}
**
** $9 -> ${10:description}
*/
${3:void} ${1:function}(${5:int} ${6:var}, ${8:int} ${9:var});
endsnippet

snippet dfun3 "Basic function prototype with 3 parameters" A
/*
** ${2:Brief}
**
** ${4:No return value}
**
** $6 -> ${7:description}
**
** $9 -> ${10:description}
**
** $12 -> ${13:description}
*/
${3:void} ${1:function}(${5:int} ${6:var}, ${8:int} ${9:var}, ${11:int} ${12:var});
endsnippet

snippet dfun4 "Basic function prototype with 4 parameters" A
/*
** ${2:Brief}
**
** ${4:No return value}
**
** $6 -> ${7:description}
**
** $9 -> ${10:description}
**
** $12 -> ${13:description}
**
** $15 -> ${16:description}
*/
${3:void} ${1:function}(${5:int} ${6:var}, ${8:int} ${9:var}, ${11:int} ${12:var}, ${14:int} ${15:var});
endsnippet

snippet struct "Structure definition" bA
typedef struct ${1:name}_s {
	${0:code};
} $1_t;
endsnippet

snippet llist "Linked list definition" bA
typedef struct ${1:name}_s {
	${0:code};
	struct $1_s* next;
} $1_t;
endsnippet

snippet enum "Enum definition" bA
typedef enum {
	${0:code};
} ${1:name}_t;
endsnippet

snippet unused "Unused variable macro"
#define UNUSED __attribute__((unused))
endsnippet
